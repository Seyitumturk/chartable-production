# Base definitions for each diagram type with detailed instructions
definitions:
  flowchart:
    description: "Flowcharts are diagrams that represent workflows or processes. They show the steps as boxes of various kinds, and their order by connecting the boxes with arrows."
    example: |
      flowchart TD
        A[Start] --> B{Is it?}
        B -->|Yes| C[OK]
        C --> D[Rethink]
        D --> B
        B ---->|No| E[End]
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional flowchart that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a flowchart that:
         - Uses clear direction and layout (TD/BT/LR/RL)
         - Implements proper node shapes based on their purpose
         - Groups related elements using subgraphs
         - Includes meaningful connections with labeled relationships
         - Applies consistent styling with classDefs
         - Adds helpful comments for maintainability

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper node shapes for each element type
      - Include clear comments using %%
      - Group related elements in subgraphs
      - Add meaningful connection labels
      - Apply consistent styling
      - End with ```

      Now, create a detailed flowchart based on the requirements above.

  class:
    description: "Class diagrams are the backbone of object-oriented modeling. They show the classes in a system, their attributes, operations, and the relationships among objects."
    example: |
      classDiagram
        Animal <|-- Duck
        Animal <|-- Fish
        Animal <|-- Zebra
        Animal : +int age
        Animal : +String gender
        Animal: +isMammal()
        Animal: +mate()
        class Duck{
          +String beakColor
          +swim()
          +quack()
        }
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional class diagram that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a class diagram that:
         - Defines clear class hierarchies and relationships
         - Uses proper access modifiers and type annotations
         - Implements interfaces and abstract classes where appropriate
         - Includes meaningful method signatures
         - Applies modern relationship syntax
         - Adds helpful comments for complex relationships

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper access modifiers (+, -, #, ~)
      - Include type annotations
      - Add clear comments using %%
      - Use modern relationship syntax
      - Group related classes logically
      - End with ```

      Now, create a detailed class diagram based on the requirements above.

  erd:
    description: "Entity Relationship Diagrams (ERDs) are used to sketch out the design of a database. They show entities (tables) in the database and relationships between tables."
    example: |
      erDiagram
        CUSTOMER ||--o{ ORDER : places
        ORDER ||--|{ LINE-ITEM : contains
        CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional ERD that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create an ERD that:
         - Uses clear entity names in PascalCase
         - Includes comprehensive attributes with proper data types
         - Marks primary and foreign keys appropriately
         - Uses modern relationship syntax
         - Adds helpful comments for complex relationships

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper relationship syntax
      - Include all necessary attributes
      - Add clear comments using %%
      - Mark constraints and keys
      - End with ```

      Now, create a detailed ERD based on the requirements above.

  sequence:
    description: "Sequence diagrams show how operations are carried out. They capture the interaction between objects in the context of a collaboration."
    example: |
      sequenceDiagram
        Alice->>John: Hello John, how are you?
        John-->>Alice: Great!
        Alice-)John: See you later!
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional sequence diagram that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a sequence diagram that:
         - Shows clear participant interactions
         - Uses proper message types
         - Implements control structures
         - Includes activation boxes
         - Adds helpful notes and comments

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Define all participants
      - Use proper message syntax
      - Add clear comments using %%
      - Include activation boxes
      - End with ```

      Now, create a detailed sequence diagram based on the requirements above.

  mindmap:
    description: "Mind maps are diagrams used to visually organize information. They show relationships among pieces of the whole."
    example: |
      mindmap
        root((mindmap))
          Origins
            Long history
            ::icon(fa fa-book)
            Popularisation
              British popular psychology author Tony Buzan
          Research
            On effectiveness<br/>and features
            On Automatic creation
              Uses
                Creative techniques
                Strategic planning
                Argument mapping
          Tools
            Pen and paper
            Mermaid
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional mindmap that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a mindmap that:
         - Has a clear central concept
         - Uses appropriate node shapes
         - Maintains proper hierarchy
         - Utilizes icons and styling
         - Groups related concepts effectively

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper node shapes
      - Maintain consistent indentation
      - Add icons and classes where appropriate
      - Keep text concise
      - End with ```

      Now, create a detailed mindmap based on the requirements above.

  timeline:
    description: "Timeline diagrams show a chronological sequence of events or milestones."
    example: |
      timeline
        title History of Social Media Platform
        2002 : LinkedIn
        2004 : Facebook
             : Google
        2005 : Youtube
        2006 : Twitter
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional timeline that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a timeline that:
         - Groups events into logical sections
         - Uses clear dates and descriptions
         - Maintains chronological order
         - Includes relevant details
         - Uses proper formatting

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper section grouping
      - Include dates and descriptions
      - Maintain chronological order
      - End with ```

      Now, create a detailed timeline based on the requirements above.

  gantt:
    description: "Gantt charts illustrate project schedules, showing the start and finish dates of terminal and summary elements of a project."
    example: |
      gantt
        title A Gantt Diagram
        dateFormat  YYYY-MM-DD
        section Section
        A task           :a1, 2014-01-01, 30d
        Another task     :after a1  , 20d
        section Another
        Task in sec      :2014-01-12  , 12d
        another task      : 24d
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional Gantt chart that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a Gantt chart that:
         - Always includes dateFormat YYYY-MM-DD
         - Has a clear title
         - Groups tasks into logical sections
         - Specifies task duration using either exact dates or relative durations (e.g., 5d)
         - Uses task dependencies with 'after' keyword
         - Marks milestones with 0d duration
         - Uses status indicators (active, done, crit) where appropriate

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Include dateFormat
      - Always specify task duration
      - Use proper section grouping
      - End with ```

      Now, create a detailed Gantt chart based on the requirements above.

  sankey:
    description: "Sankey diagrams visualize the flow of resources, energy, or materials. The width of the arrows is proportional to the flow quantity."
    example: |
      sankey-beta
        Agricultural 'waste',Bio-conversion,124.729
        Bio-conversion,Liquid,0.597
        Bio-conversion,Losses,26.862
        Bio-conversion,Solid,280.322
        Bio-conversion,Gas,81.144
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional sankey diagram that follows modern best practices. Your task is to:

      1. Analyze the data: {prompt}
      2. Create a sankey diagram that:
         - Visualizes flows between nodes using a CSV-like syntax where each line has three values: source, target, and numerical value
         - Utilizes the experimental sankey-beta syntax along with any necessary configuration settings (such as showing or hiding values, dimensions, or link colors)
      
      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Include the optional configuration using a front-matter block if needed
      - Follow the CSV format: source,target,value for each connection
      - End with ```
      
      Now, create a detailed sankey diagram based on the requirements above.
  git:
    description: "Git graphs visualize Git commit history and branching structures."
    example: |
      gitGraph
        commit
        commit
        branch develop
        checkout develop
        commit
        commit
        checkout main
        merge develop
        commit
        commit
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional Git graph that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a Git graph that:
         - Shows clear branch structure
         - Includes meaningful commit messages
         - Uses proper branching strategy
         - Shows merges and checkouts
         - Maintains clarity and readability

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper branch names
      - Include commit messages
      - Show merges correctly
      - End with ```

      Now, create a detailed Git graph based on the requirements above.  
  state:
    description: "State diagrams describe the behavior of a system, showing states and transitions between states."
    example: |
      stateDiagram-v2
        [*] --> Still
        Still --> [*]
        Still --> Moving
        Moving --> Still
        Moving --> Crash
        Crash --> [*]
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional state diagram that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a state diagram that:
         - Describes the behavior of a system as a finite set of states and transitions.
         - Uses modern syntax (stateDiagram-v2) with clear state definitions and transitions.
         - Defines clear start ([*]) and end ([*]) states.
         - Organizes related states into composite states where needed.
         - Uses transitions with conditions or actions appropriately.
         - Adds descriptive notes (using note left/right) to clarify behavior.
         - Allows layout customizations (such as direction statements) for clarity.

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use stateDiagram-v2 syntax
      - Include clear state definitions with transitions, notes, and composite state sections
      - Keep text concise and descriptive
      - End with ```
      
      Now, create a detailed state diagram based on the requirements above.

  architecture:
    description: "Architecture diagrams visualize cloud and system infrastructure, showing relationships between services and resources."
    example: |
      architecture-beta
        group api(cloud)[API]

        service db(database)[Database] in api
        service disk1(disk)[Storage] in api
        service disk2(disk)[Storage] in api
        service server(server)[Server] in api

        db:L -- R:server
        disk1:T -- B:server
        disk2:T -- B:db
    prompt_template: |
      Create a mermaid architecture diagram based on the following description:
      
      {prompt}
      
      Use the architecture-beta syntax. Here's a simple example:
      
      ```
      architecture-beta
        group api(cloud)[API]
        
        service db(database)[Database] in api
        service disk1(disk)[Storage] in api
        service disk2(disk)[Storage] in api
        service server(server)[Server] in api
        
        db:L -- R:server
        disk1:T -- B:server
        disk2:T -- B:db
      ```
      
      Important syntax rules:
      - Start with "architecture-beta"
      - For groups: group {id}({icon})[{label}]
      - For services: service {id}({icon})[{label}]
      - For edges: {serviceId}:L -- R:{serviceId}
      - Available icons: cloud, database, disk, internet, server
      
      Provide ONLY the mermaid code without any explanations.

# Example sections with modern, practical use cases
flowchartExamples: |
  Example: Modern Microservice Architecture
  ```mermaid
  flowchart LR
    %% Client Layer
    Client((Client))
    
    %% API Gateway
    subgraph gateway [API Gateway]
      direction TB
      LoadBalancer[/Load Balancer/]
      Auth[Authentication]
      Router{Router}
    end
    
    %% Microservices
    subgraph services [Services]
      direction TB
      UserService[(User Service)]
      PaymentService[(Payment Service)]
      ProductService[(Product Service)]
    end
    
    %% Database Layer
    subgraph databases [Databases]
      UserDB[(User DB)]
      PaymentDB[(Payment DB)]
      ProductDB[(Product DB)]
    end
    
    %% Connections
    Client --> LoadBalancer
    LoadBalancer --> Auth
    Auth --> Router
    Router -->|/users| UserService
    Router -->|/payments| PaymentService
    Router -->|/products| ProductService
    UserService --> UserDB
    PaymentService --> PaymentDB
    ProductService --> ProductDB
    
    %% Styling
    classDef service fill:#f9f,stroke:#333,stroke-width:2px
    class UserService,PaymentService,ProductService service
  ```

classExamples: |
  Example: Modern Task Management System
  ```mermaid
  classDiagram
    %% Interfaces
    class ITask {
      <<interface>>
      +getStatus() TaskStatus
      +assignTo(user: User) void
      +updateProgress(progress: number) void
    }
    
    %% Base Classes
    class Task {
      -id: UUID
      -title: string
      -description: string
      -status: TaskStatus
      -assignee: User
      -progress: number
      +constructor(title: string)
      +getStatus() TaskStatus
      +assignTo(user: User) void
      +updateProgress(progress: number) void
    }
    
    %% Specialized Tasks
    class ProjectTask {
      -project: Project
      -deadline: Date
      +getProjectDetails() ProjectInfo
    }
    
    class RecurringTask {
      -interval: Duration
      -nextOccurrence: Date
      +scheduleNext() void
    }
    
    %% User Management
    class User {
      -id: UUID
      -email: string
      -tasks: Task[]
      +assignTask(task: Task) void
      +getTasks() Task[]
    }
    
    %% Relationships
    Task ..|> ITask
    ProjectTask --|> Task
    RecurringTask --|> Task
    User "1" o-- "many" Task
    
    %% Enums
    class TaskStatus {
      <<enumeration>>
      TODO
      IN_PROGRESS
      COMPLETED
      BLOCKED
    }
  ```

erdExamples: |
  Example: Modern E-commerce Platform
  ```mermaid
  erDiagram
    %% User Management
    USER ||--o{ ORDER : places
    USER {
      uuid id PK
      string email UK
      string password_hash
      string first_name
      string last_name
      datetime created_at
      datetime last_login
    }
    
    %% Product Management
    PRODUCT ||--o{ ORDER_ITEM : contains
    PRODUCT ||--o{ PRODUCT_CATEGORY : belongs_to
    PRODUCT {
      uuid id PK
      string name
      text description
      decimal price
      int stock_quantity
      string sku UK
      datetime created_at
      boolean is_active
    }
    
    %% Order Management
    ORDER ||--|{ ORDER_ITEM : includes
    ORDER {
      uuid id PK
      uuid user_id FK
      decimal total_amount
      string status
      datetime order_date
      string payment_status
      string shipping_address
    }
    
    %% Order Items
    ORDER_ITEM {
      uuid id PK
      uuid order_id FK
      uuid product_id FK
      int quantity
      decimal unit_price
      decimal subtotal
    }
    
    %% Categories
    PRODUCT_CATEGORY {
      uuid id PK
      string name
      string slug UK
      uuid parent_id FK "Self-referential"
    }
    
    %% Reviews
    REVIEW }o--|| PRODUCT : reviews
    REVIEW }o--|| USER : writes
    REVIEW {
      uuid id PK
      uuid user_id FK
      uuid product_id FK
      int rating
      text comment
      datetime created_at
    }
  ```

stateExamples: |
  Example: Modern Order Processing System
  ```mermaid
  stateDiagram-v2
    [*] --> Created: Order Placed
    
    state "Order Processing" as Processing {
      Created --> PaymentPending: Initialize Payment
      
      state "Payment Processing" as PaymentProcess {
        PaymentPending --> PaymentValidation: Payment Submitted
        PaymentValidation --> PaymentConfirmed: Valid Payment
        PaymentValidation --> PaymentFailed: Invalid Payment
        PaymentFailed --> PaymentPending: Retry Payment
      }
      
      PaymentConfirmed --> Fulfillment: Start Fulfillment
      
      state "Fulfillment Process" as Fulfillment {
        state "Inventory Check" as InventoryCheck {
          [*] --> CheckingStock
          CheckingStock --> InStock: Available
          CheckingStock --> OutOfStock: Not Available
          OutOfStock --> BackorderCreated: Create Backorder
          BackorderCreated --> InStock: Stock Received
        }
        
        InStock --> Picking: Assign to Picker
        Picking --> Packing: Items Collected
        Packing --> ReadyToShip: Package Complete
      }
      
      ReadyToShip --> Shipped: Carrier Pickup
    }
    
    Shipped --> InTransit: Package in Transit
    InTransit --> Delivered: Delivery Confirmed
    Delivered --> [*]
    
    state "Return Process" as Return {
      Delivered --> ReturnRequested: Customer Requests Return
      ReturnRequested --> ReturnInTransit: Return Shipped
      ReturnInTransit --> ReturnReceived: Return Arrived
      ReturnReceived --> RefundProcessing: Inspection Passed
      RefundProcessing --> Refunded: Refund Issued
      Refunded --> [*]
    }
  ```

timelineExamples: |
  Example: Product Launch Timeline
  ```mermaid
  timeline
    title Product Development and Launch Timeline
    
    section Planning Phase
      Initial Concept : 2024-01-15 : Brainstorming and market research
      Requirements Gathering : 2024-01-20 : Detailed feature specification
      Project Plan Approval : 2024-01-30 : Stakeholder sign-off
    
    section Development
      Sprint 1 : 2024-02-01 : Core functionality
      Sprint 2 : 2024-02-15 : User interface
      Sprint 3 : 2024-03-01 : API integration
      
    section Testing
      Alpha Testing : 2024-03-15 : Internal testing
      Beta Program : 2024-04-01 : Selected customers
      Performance Testing : 2024-04-15 : Load and stress tests
      
    section Launch
      Marketing Campaign : 2024-05-01 : Social media and PR
      Soft Launch : 2024-05-15 : Limited release
      Full Release : 2024-06-01 : Public availability
  ```

ganttExamples: |
  Example: Software Release Plan
  ```mermaid
  gantt
    dateFormat  YYYY-MM-DD
    title       Adding GANTT diagram functionality to mermaid
    excludes    weekends
    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week ("sunday") or "weekends", but not the word "weekdays".)

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2              :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :until isadded
    Functionality added                 :milestone, isadded, 2014-01-25, 0d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      :20h
    Add another diagram to demo page    :48h
  ```

mindmapExamples: |
  Example: Project Planning Mindmap
  ```mermaid
  mindmap
    root((Project Plan))
      Requirements
        :::important
        Functional
          ::icon(fa fa-cogs)
          Core Features
          User Interface
          API Integration
        Non-Functional
          ::icon(fa fa-shield)
          Security
          Performance
          Scalability
      Resources
        "`**Team Members**`"
          Frontend Devs
          Backend Devs
          UX Designer
        Tools
          :::tools
          Version Control
          CI/CD Pipeline
          Testing Suite
      Timeline
        ::icon(fa fa-calendar)
        Phase 1
          Planning
          Setup
        Phase 2
          Development
          Testing
        Phase 3
          "`*Deployment*
          and Launch`"
  ```

prompts:
  system_template: |
    You are an expert in creating mermaid.js diagrams. Your task is to create a {diagram_type} diagram based on the user's description.
    
    {description}
    
    For architecture diagrams, use the architecture-beta syntax and follow these rules:
    - Start with "architecture-beta"
    - For groups: group {id}({icon})[{label}]
    - For services: service {id}({icon})[{label}]
    - For edges: {serviceId}:L -- R:{serviceId}
    - Available icons: cloud, database, disk, internet, server
    
    Respond ONLY with the mermaid code for the diagram, without any explanations or markdown formatting. Start directly with the diagram syntax.

  user_template: |
    Create a mermaid {diagram_type} diagram based on the following description:
    
    {prompt}
    
    Here's an example:
    
    ```mermaid
    {example}
    ```
    
    Please provide only the mermaid code without any explanations.

  mine:
    description: |
      This is your custom "mine" diagram. Describe your mine diagram's elements here.
    prompt_template: |
      Please generate a diagram in Mermaid syntax that shows your custom mine diagram.
      IMPORTANT: Wrap your entire output in triple backticks with the word "mermaid".
      For example:
      ```mermaid
      graph LR
         A[Start] --> B[Next]
      ```
      Now generate only the Mermaid diagram (with no additional text).
    example: |
      ```mermaid
      graph LR
         A[Start] --> B[Next]
         B --> C[End]
      ```
