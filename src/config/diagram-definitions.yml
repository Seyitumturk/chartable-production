# Base definitions for each diagram type with detailed instructions
definitions:
  flowchart:
    description: |
      Create a professional flowchart following these guidelines:
      - Use modern direction syntax: TD (top-down), BT (bottom-top), LR (left-right), or RL (right-left)
      - Include descriptive node labels with proper escaping for special characters
      - Use modern node shapes:
        * [Rectangle] for process steps
        * {Diamond} for decisions
        * ([Rounded]) for start/end points
        * [(Database)] for data storage
        * [/Parallelogram/] for input/output
        * {{Hexagon}} for preparation steps
        * [>Note] for notes/comments
        * ((Circle)) for connections
      - Add meaningful link labels between nodes using |text|
      - Group related processes using subgraphs with modern syntax:
        subgraph title
          direction LR/TB
          content
        end
      - Use click events for interactive nodes: click nodeId "URL" "Tooltip"
      - Apply consistent styling using classDefs
      - Use modern link styles: -->, -.-> (dotted), ==> (thick)
      - Add comments using %% for better maintainability
    example: |
      flowchart LR
        %% Client Layer
        Client((Client))
        
        %% API Gateway
        subgraph gateway [API Gateway]
          direction TB
          LoadBalancer[/Load Balancer/]
          Auth[Authentication]
          Router{Router}
        end
        
        %% Microservices
        subgraph services [Services]
          direction TB
          UserService[(User Service)]
          PaymentService[(Payment Service)]
          ProductService[(Product Service)]
        end
        
        %% Database Layer
        subgraph databases [Databases]
          UserDB[(User DB)]
          PaymentDB[(Payment DB)]
          ProductDB[(Product DB)]
        end
        
        %% Connections
        Client --> LoadBalancer
        LoadBalancer --> Auth
        Auth --> Router
        Router -->|/users| UserService
        Router -->|/payments| PaymentService
        Router -->|/products| ProductService
        UserService --> UserDB
        PaymentService --> PaymentDB
        ProductService --> ProductDB
        
        %% Styling
        classDef service fill:#f9f,stroke:#333,stroke-width:2px
        class UserService,PaymentService,ProductService service
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional flowchart that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a flowchart that:
         - Uses clear direction and layout (TD/BT/LR/RL)
         - Implements proper node shapes based on their purpose
         - Groups related elements using subgraphs
         - Includes meaningful connections with labeled relationships
         - Applies consistent styling with classDefs
         - Adds helpful comments for maintainability

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper node shapes for each element type
      - Group related elements in subgraphs
      - Add meaningful connection labels
      - Apply consistent styling
      - End with ```

      Now, create a detailed flowchart based on the requirements above.

  class:
    description: |
      Create a detailed class diagram that shows:
      - All relevant classes with proper naming
      - Class attributes with modern type annotations
      - Methods with parameters, return types, and generics support
      - Modern relationship syntax:
        * Inheritance: --|>
        * Implementation: ..|>
        * Composition: *--
        * Aggregation: o--
        * Association: -->
        * Dependency: ..>
      - Access modifiers:
        * +public
        * -private
        * #protected
        * ~package/internal
      - Use modern features:
        * <<interface>> and <<abstract>> stereotypes
        * Generic types <T>
        * Static members and methods with $
        * Namespace support
        * Method overloading
      - Include clear comments using %% syntax
    example: |
      classDiagram
        %% Interfaces
        class ITask {
          <<interface>>
          +getStatus() TaskStatus
          +assignTo(user: User) void
          +updateProgress(progress: number) void
        }
        
        %% Base Classes
        class Task {
          -id: UUID
          -title: string
          -description: string
          -status: TaskStatus
          -assignee: User
          -progress: number
          +constructor(title: string)
          +getStatus() TaskStatus
          +assignTo(user: User) void
          +updateProgress(progress: number) void
        }
        
        %% Specialized Tasks
        class ProjectTask {
          -project: Project
          -deadline: Date
          +getProjectDetails() ProjectInfo
        }
        
        %% Relationships
        Task ..|> ITask
        ProjectTask --|> Task
        User "1" o-- "many" Task
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional class diagram that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a class diagram that:
         - Defines clear class hierarchies and relationships
         - Uses proper access modifiers and type annotations
         - Implements interfaces and abstract classes where appropriate
         - Includes meaningful method signatures
         - Applies modern relationship syntax
         - Adds helpful comments for complex relationships

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper access modifiers (+, -, #, ~)
      - Include type annotations
      - Add clear comments using %%
      - Use modern relationship syntax
      - Group related classes logically
      - End with ```

      Now, create a detailed class diagram based on the requirements above.

  erd:
    description: |
      Create a comprehensive ERD that includes:
      - All essential entities with clear names (PascalCase recommended)
      - Complete set of attributes with modern data types
      - Primary and foreign keys clearly marked (PK, FK)
      - Modern relationship types:
        * one-to-one: ||--|| with relationship text
        * one-to-many: ||--|{ with relationship text
        * many-to-many: }|--|{ with relationship text
        * zero-or-one: |o--|| with relationship text
        * zero-or-many: }o--|{ with relationship text
      - Relationship labels describing the connection
      - Attribute constraints and validations
      - Use comments for complex relationships
      - Include indexes and unique constraints
      - Group related entities using modern clustering
    example: |
      erDiagram
        %% User Management
        USER ||--o{ ORDER : places
        USER {
          uuid id PK
          string email UK
          string password_hash
          string first_name
          string last_name
          datetime created_at
          datetime last_login
        }
        
        %% Product Management
        PRODUCT ||--o{ ORDER_ITEM : contains
        PRODUCT {
          uuid id PK
          string name
          text description
          decimal price
          int stock_quantity
          string sku UK
          datetime created_at
          boolean is_active
        }
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional ERD that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create an ERD that:
         - Uses clear entity names in PascalCase
         - Includes comprehensive attributes with proper data types
         - Marks primary and foreign keys appropriately
         - Uses modern relationship syntax
         - Adds helpful comments for complex relationships

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper relationship syntax
      - Include all necessary attributes
      - Add clear comments using %%
      - Mark constraints and keys
      - End with ```

      Now, create a detailed ERD based on the requirements above.

  sequence:
    description: |
      Create a detailed sequence diagram showing:
      - All participating actors/objects with descriptive names
      - Modern message syntax:
        * Synchronous: ->> with solid arrow
        * Asynchronous: -->> with dashed arrow
        * Response: -->> with dashed arrow and text
        * Self message: ->> self
      - Activation boxes using + and - for precise timing
      - Modern control structures:
        * alt for alternatives
        * opt for optional paths
        * par for parallel execution
        * loop for repetition
        * break for breaking conditions
      - Notes using Note left of, Note right of, Note over
      - Participant groups using boxes
      - Modern features:
        * Background highlighting
        * Participant creation/destruction
        * Message numbering
        * Critical sections
      - Use comments for complex flows
    example: |
      sequenceDiagram
        %% Participants
        participant User
        participant API
        participant DB
        
        %% Authentication Flow
        User->>+API: Login Request
        Note right of User: With credentials
        
        %% Validation
        alt Invalid Credentials
            API-->>-User: Authentication Failed
        else Valid Credentials
            API->>+DB: Verify User
            DB-->>-API: User Found
            
            %% Token Generation
            activate API
            Note over API: Generate JWT
            API-->>-User: Return Token
        end
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional sequence diagram that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a sequence diagram that:
         - Shows clear participant interactions
         - Uses proper message types
         - Implements control structures
         - Includes activation boxes
         - Adds helpful notes and comments

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Define all participants
      - Use proper message syntax
      - Add clear comments using %%
      - Include activation boxes
      - End with ```

      Now, create a detailed sequence diagram based on the requirements above.

  mindmap:
    description: |
      Create an organized mindmap following these guidelines:
      - Start with a clear central concept (root)
      - Node shape system:
        * Root node: Always uses cloud shape )text(
        * All other nodes: Always use rounded style (text)
        * Note: All nodes will be automatically styled based on this convention
      - Structure and Hierarchy:
        * Use indentation to define hierarchy levels
        * Each level should be clearly indented from its parent
        * Maintain consistent indentation for siblings
      - Advanced Features:
        * Icons using ::icon() syntax
        * CSS Classes using triple colon
        * Markdown formatting in strings
        * Unicode emoji support
      - Best Practices:
        * Keep node text concise and clear
        * Group related ideas under common parents
        * Utilize icons to enhance visual understanding
    example: |
      mindmap
        )Project Plan(
          (Requirements)
            :::important
            (Functional)
              ::icon(fa fa-cogs)
              (Core Features)
              (User Interface)
              (API Integration)
            (Non-Functional)
              ::icon(fa fa-shield)
              (Security)
              (Performance)
              (Scalability)
        (Resources)
          ("`**Team Members**`")
            (Frontend Devs)
            (Backend Devs)
            (UX Designer)
          (Tools)
            :::tools
            (Version Control)
            (CI/CD Pipeline)
            (Testing Suite)
        (Timeline)
          ::icon(fa fa-calendar)
          (Phase 1)
            (Planning)
            (Setup)
          (Phase 2)
            (Development)
            (Testing)
          (Phase 3)
            ("`*Deployment*
            and Launch`")
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional mindmap that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a mindmap that:
         - Has a clear central concept as cloud shape for the root node
         - Uses rounded style for all other nodes
         - Maintains proper hierarchy
         - Utilizes icons and styling
         - Groups related concepts effectively

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use cloud shape for root node: )Root Concept(
      - Use rounded shape for all other nodes: (Node Text)
      - Maintain consistent indentation
      - Add icons and classes where appropriate
      - Keep text concise
      - End with ```

      Now, create a detailed mindmap based on the requirements above.

  timeline:
    description: |
      Create a timeline diagram that:
      - Uses sections for grouping events
      - Supports different time scales
      - Includes:
        * Title for each event
        * Description
        * Date/time
      - Allows:
        * Multiple events per line
        * Color coding
        * Icons and emojis
      - Uses modern syntax:
        * section [Section name]
        * [Event title] : [description]
      - Supports markdown in descriptions
      - Maintains chronological order
      - Uses clear date formatting
    example: |
      timeline
        title Product Development Timeline
        
        section Planning Phase
          Initial Concept : 2024-01-15 : Brainstorming and research
          Requirements Gathering : 2024-01-20 : Feature specification
        
        section Development
          Sprint 1 : 2024-02-01 : Core functionality
          Sprint 2 : 2024-02-15 : User interface
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional timeline that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a timeline that:
         - Groups events into logical sections
         - Uses clear dates and descriptions
         - Maintains chronological order
         - Includes relevant details
         - Uses proper formatting

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper section grouping
      - Include dates and descriptions
      - Maintain chronological order
      - End with ```

      Now, create a detailed timeline based on the requirements above.

  gantt:
    description: |
      Create a Gantt chart that shows:
      - Project timeline with clear sections
      - Tasks with:
        * Duration
        * Dependencies
        * Milestones
      - Modern features:
        * Date format specification
        * Weekend highlighting
        * Today marker
        * Progress indicators
    example: |
      gantt
      title Project Lifecycle Overview
      dateFormat YYYY-MM-DD
      excludes weekends

      section Initiation
      Project Approval    :done, a1, 2024-02-01, 0d
      Stakeholder Meeting :done, a2, 2024-02-02, 2d

      section Planning
      Requirements Gathering :active, req1, 2024-02-05, 10d
      Feasibility Study     :fs1, after req1, 5d
      Project Plan Approval :milestone, pa1, after fs1, 0d

      section Execution
      Design Phase      :crit, des1, after pa1, 15d
      Development Phase :crit, dev1, after des1, 30d
      Testing          :test1, after des1, 20d

      section Monitoring
      Performance Review :pr1, 2024-04-01, 10d
      Quality Assurance  :qa1, after des1, 15d

      section Closure
      Final Review     :milestone, rev1, after qa1, 0d
      Project Handover :hand1, after rev1, 5d
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional Gantt chart that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a Gantt chart that:
         - Always includes dateFormat YYYY-MM-DD
         - Has a clear title
         - Groups tasks into logical sections
         - Specifies task duration using either exact dates or relative durations (e.g., 5d)
         - Uses task dependencies with 'after' keyword
         - Marks milestones with 0d duration
         - Uses status indicators (active, done, crit) where appropriate

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Include dateFormat
      - Always specify task duration
      - Use proper section grouping
      - End with ```

      Now, create a detailed Gantt chart based on the requirements above.

  sankey:
    description: |
      Create an insightful sankey diagram to visualize flows from one set of values to another. Use an experimental CSV-like syntax where each line describes a connection between a source node and a target node along with an associated numerical value. Note that this diagram type (v10.3.0+) is experimental and its syntax might evolve.
    example: |
      mermaid
      ---
      config:
        sankey:
          showValues: false
      ---
      sankey-beta
      %% Define flows using CSV format: source,target,value
      Agricultural 'waste',Bio-conversion,124.729
      Bio-conversion,Liquid,0.597
      Bio-conversion,Losses,26.862
      Bio-conversion,Solid,280.322
      Bio-conversion,Gas,81.144
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional sankey diagram that follows modern best practices. Your task is to:

      1. Analyze the data: {prompt}
      2. Create a sankey diagram that:
         - Visualizes flows between nodes using a CSV-like syntax where each line has three values: source, target, and numerical value
         - Utilizes the experimental sankey-beta syntax along with any necessary configuration settings (such as showing or hiding values, dimensions, or link colors)
      
      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Include the optional configuration using a front-matter block if needed
      - Follow the CSV format: source,target,value for each connection
      - End with ```
      
      Now, create a detailed sankey diagram based on the requirements above.
  git:
    description: |
      Create a Git graph that shows:
      - Branch structure using gitGraph
      - Commits with:
        * Messages
        * Tags
        * Branch points
      - Modern features:
        * Cherry-picks
        * Merges
        * Checkouts
      - Supports:
        * Branch colors
        * Custom commit IDs
        * Different orientations
      - Uses modern syntax:
        * commit id: "message"
        * branch [name]
        * merge [branch]
    example: |
      gitGraph
        commit id: "initial"
        branch develop
        checkout develop
        commit id: "feature-start"
        branch feature/login
        checkout feature/login
        commit id: "auth-basic"
        checkout develop
        merge feature/login
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional Git graph that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a Git graph that:
         - Shows clear branch structure
         - Includes meaningful commit messages
         - Uses proper branching strategy
         - Shows merges and checkouts
         - Maintains clarity and readability

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use proper branch names
      - Include commit messages
      - Show merges correctly
      - End with ```

      Now, create a detailed Git graph based on the requirements above.  
  state:
    description: |
      Create a detailed state diagram showing:
      - All possible states with descriptive names
      - Modern transition syntax:
        * Normal: -->
        * Conditional: --> [condition]
        * With actions: --> : action
      - State descriptions:
        * Entry and exit actions
        * Internal actions
        * Composite states (use state stateName { ... })
        * Parallel states
      - Modern features:
        * Choice points using <<choice>>
        * History states using [H] and [H*]
        * Fork and join using <<fork>> / <<join>>
        * Notes and comments (use "note right of" or "note left of")
      - Supports start ([*]) and end ([*]) states to indicate initial and final state
      - Allows layout customization with direction statements (e.g. direction LR)
    example: |
      stateDiagram-v2
        [*] --> Created: Order Placed
        
        state "Order Processing" as Processing {
          [*] --> PaymentPending: Initialize Payment
          
          state "Payment Processing" as PaymentProcess {
            PaymentPending --> PaymentValidation: Payment Submitted
            PaymentValidation --> PaymentConfirmed: Valid Payment
            PaymentValidation --> PaymentFailed: Invalid Payment
            PaymentFailed --> PaymentPending: Retry Payment
          }
          
          %% Example of adding a note for clarification
          PaymentConfirmed --> Shipped: Order Shipped
          note right of Shipped: This state triggers shipment.
        }
        
        Shipped --> [*]: Delivery Complete
    prompt_template: |
      As an expert Mermaid.js diagram creator, create a professional state diagram that follows modern best practices. Your task is to:

      1. Analyze the requirements: {prompt}
      2. Create a state diagram that:
         - Describes the behavior of a system as a finite set of states and transitions.
         - Uses modern syntax (stateDiagram-v2) with clear state definitions and transitions.
         - Defines clear start ([*]) and end ([*]) states.
         - Organizes related states into composite states where needed.
         - Uses transitions with conditions or actions appropriately.
         - Adds descriptive notes (using note left/right) to clarify behavior.
         - Allows layout customizations (such as direction statements) for clarity.

      Reference this example for structure and styling:
      {example}

      Important:
      - Start with ```mermaid
      - Use stateDiagram-v2 syntax
      - Include clear state definitions with transitions, notes, and composite state sections
      - Keep text concise and descriptive
      - End with ```
      
      Now, create a detailed state diagram based on the requirements above.
# Example sections with modern, practical use cases
flowchartExamples: |
  Example: Modern Microservice Architecture
  ```mermaid
  flowchart LR
    %% Client Layer
    Client((Client))
    
    %% API Gateway
    subgraph gateway [API Gateway]
      direction TB
      LoadBalancer[/Load Balancer/]
      Auth[Authentication]
      Router{Router}
    end
    
    %% Microservices
    subgraph services [Services]
      direction TB
      UserService[(User Service)]
      PaymentService[(Payment Service)]
      ProductService[(Product Service)]
    end
    
    %% Database Layer
    subgraph databases [Databases]
      UserDB[(User DB)]
      PaymentDB[(Payment DB)]
      ProductDB[(Product DB)]
    end
    
    %% Connections
    Client --> LoadBalancer
    LoadBalancer --> Auth
    Auth --> Router
    Router -->|/users| UserService
    Router -->|/payments| PaymentService
    Router -->|/products| ProductService
    UserService --> UserDB
    PaymentService --> PaymentDB
    ProductService --> ProductDB
    
    %% Styling
    classDef service fill:#f9f,stroke:#333,stroke-width:2px
    class UserService,PaymentService,ProductService service
  ```

classExamples: |
  Example: Modern Task Management System
  ```mermaid
  classDiagram
    %% Interfaces
    class ITask {
      <<interface>>
      +getStatus() TaskStatus
      +assignTo(user: User) void
      +updateProgress(progress: number) void
    }
    
    %% Base Classes
    class Task {
      -id: UUID
      -title: string
      -description: string
      -status: TaskStatus
      -assignee: User
      -progress: number
      +constructor(title: string)
      +getStatus() TaskStatus
      +assignTo(user: User) void
      +updateProgress(progress: number) void
    }
    
    %% Specialized Tasks
    class ProjectTask {
      -project: Project
      -deadline: Date
      +getProjectDetails() ProjectInfo
    }
    
    class RecurringTask {
      -interval: Duration
      -nextOccurrence: Date
      +scheduleNext() void
    }
    
    %% User Management
    class User {
      -id: UUID
      -email: string
      -tasks: Task[]
      +assignTask(task: Task) void
      +getTasks() Task[]
    }
    
    %% Relationships
    Task ..|> ITask
    ProjectTask --|> Task
    RecurringTask --|> Task
    User "1" o-- "many" Task
    
    %% Enums
    class TaskStatus {
      <<enumeration>>
      TODO
      IN_PROGRESS
      COMPLETED
      BLOCKED
    }
  ```

erdExamples: |
  Example: Modern E-commerce Platform
  ```mermaid
  erDiagram
    %% User Management
    USER ||--o{ ORDER : places
    USER {
      uuid id PK
      string email UK
      string password_hash
      string first_name
      string last_name
      datetime created_at
      datetime last_login
    }
    
    %% Product Management
    PRODUCT ||--o{ ORDER_ITEM : contains
    PRODUCT ||--o{ PRODUCT_CATEGORY : belongs_to
    PRODUCT {
      uuid id PK
      string name
      text description
      decimal price
      int stock_quantity
      string sku UK
      datetime created_at
      boolean is_active
    }
    
    %% Order Management
    ORDER ||--|{ ORDER_ITEM : includes
    ORDER {
      uuid id PK
      uuid user_id FK
      decimal total_amount
      string status
      datetime order_date
      string payment_status
      string shipping_address
    }
    
    %% Order Items
    ORDER_ITEM {
      uuid id PK
      uuid order_id FK
      uuid product_id FK
      int quantity
      decimal unit_price
      decimal subtotal
    }
    
    %% Categories
    PRODUCT_CATEGORY {
      uuid id PK
      string name
      string slug UK
      uuid parent_id FK "Self-referential"
    }
    
    %% Reviews
    REVIEW }o--|| PRODUCT : reviews
    REVIEW }o--|| USER : writes
    REVIEW {
      uuid id PK
      uuid user_id FK
      uuid product_id FK
      int rating
      text comment
      datetime created_at
    }
  ```

stateExamples: |
  Example: Modern Order Processing System
  ```mermaid
  stateDiagram-v2
    [*] --> Created: Order Placed
    
    state "Order Processing" as Processing {
      Created --> PaymentPending: Initialize Payment
      
      state "Payment Processing" as PaymentProcess {
        PaymentPending --> PaymentValidation: Payment Submitted
        PaymentValidation --> PaymentConfirmed: Valid Payment
        PaymentValidation --> PaymentFailed: Invalid Payment
        PaymentFailed --> PaymentPending: Retry Payment
      }
      
      PaymentConfirmed --> Fulfillment: Start Fulfillment
      
      state "Fulfillment Process" as Fulfillment {
        state "Inventory Check" as InventoryCheck {
          [*] --> CheckingStock
          CheckingStock --> InStock: Available
          CheckingStock --> OutOfStock: Not Available
          OutOfStock --> BackorderCreated: Create Backorder
          BackorderCreated --> InStock: Stock Received
        }
        
        InStock --> Picking: Assign to Picker
        Picking --> Packing: Items Collected
        Packing --> ReadyToShip: Package Complete
      }
      
      ReadyToShip --> Shipped: Carrier Pickup
    }
    
    Shipped --> InTransit: Package in Transit
    InTransit --> Delivered: Delivery Confirmed
    Delivered --> [*]
    
    state "Return Process" as Return {
      Delivered --> ReturnRequested: Customer Requests Return
      ReturnRequested --> ReturnInTransit: Return Shipped
      ReturnInTransit --> ReturnReceived: Return Arrived
      ReturnReceived --> RefundProcessing: Inspection Passed
      RefundProcessing --> Refunded: Refund Issued
      Refunded --> [*]
    }
  ```

timelineExamples: |
  Example: Product Launch Timeline
  ```mermaid
  timeline
    title Product Development and Launch Timeline
    
    section Planning Phase
      Initial Concept : 2024-01-15 : Brainstorming and market research
      Requirements Gathering : 2024-01-20 : Detailed feature specification
      Project Plan Approval : 2024-01-30 : Stakeholder sign-off
    
    section Development
      Sprint 1 : 2024-02-01 : Core functionality
      Sprint 2 : 2024-02-15 : User interface
      Sprint 3 : 2024-03-01 : API integration
      
    section Testing
      Alpha Testing : 2024-03-15 : Internal testing
      Beta Program : 2024-04-01 : Selected customers
      Performance Testing : 2024-04-15 : Load and stress tests
      
    section Launch
      Marketing Campaign : 2024-05-01 : Social media and PR
      Soft Launch : 2024-05-15 : Limited release
      Full Release : 2024-06-01 : Public availability
  ```

ganttExamples: |
  Example: Software Release Plan
  ```mermaid
  gantt
    dateFormat  YYYY-MM-DD
    title       Adding GANTT diagram functionality to mermaid
    excludes    weekends
    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week ("sunday") or "weekends", but not the word "weekdays".)

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2              :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :until isadded
    Functionality added                 :milestone, isadded, 2014-01-25, 0d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      :20h
    Add another diagram to demo page    :48h
  ```

mindmapExamples: |
  Example: Project Planning Mindmap
  ```mermaid
  mindmap
    root((Project Plan))
      Requirements
        :::important
        Functional
          ::icon(fa fa-cogs)
          Core Features
          User Interface
          API Integration
        Non-Functional
          ::icon(fa fa-shield)
          Security
          Performance
          Scalability
      Resources
        "`**Team Members**`"
          Frontend Devs
          Backend Devs
          UX Designer
        Tools
          :::tools
          Version Control
          CI/CD Pipeline
          Testing Suite
      Timeline
        ::icon(fa fa-calendar)
        Phase 1
          Planning
          Setup
        Phase 2
          Development
          Testing
        Phase 3
          "`*Deployment*
          and Launch`"
  ```

prompts:
  system_template: >
    You are a helpful assistant that creates a {diagram_type} diagram. Your job is to use the description below and the example provided to generate a professional diagram:
    {description}
    --
    Example:
    {example}
    --
    IMPORTANT CONTEXT HANDLING INSTRUCTIONS:
    1. This is a continuous conversation. Maintain context from previous messages.
    2. When the user asks for updates or modifications to a diagram, modify the existing diagram instead of creating a new one.
    3. If you previously created a diagram, the user's follow-up prompts are about modifying or extending that same diagram.
    4. Build upon the previously generated diagram when the user asks for changes, rather than starting from scratch.
    5. If you're asked to add or modify elements, keep the existing elements and structure intact unless explicitly told to remove or change them.
    6. For clarity, include a brief explanation of what you've changed or added to the diagram.
  user_template: >
    Please create a {diagram_type} diagram based on the following prompt:
    {prompt}
    --
    Use the example as guidance:
    {example}

  mine:
    description: |
      This is your custom "mine" diagram. Describe your mine diagram's elements here.
    prompt_template: |
      Please generate a diagram in Mermaid syntax that shows your custom mine diagram.
      IMPORTANT: Wrap your entire output in triple backticks with the word "mermaid".
      For example:
      ```mermaid
      graph LR
         A[Start] --> B[Next]
      ```
      Now generate only the Mermaid diagram (with no additional text).
    example: |
      ```mermaid
      graph LR
         A[Start] --> B[Next]
         B --> C[End]
      ```
